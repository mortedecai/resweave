name: Resweave CI/CD Build
on:
  push:
    tag:
      - "v[0-9]+.[0-9]+.[0-9]+" # (mortedecai): Intentionally only run on tag pushes for full versions not alphas.
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  code-check:
    name: Build and check code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: "^1.24"

      - name: Set PR Version Tag
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "CUR_PROJECT_VERSION=$(./project bump -c)" >> "$GITHUB_ENV"
          else
            echo "CUR_PROJECT_VERSION=$(./project bump -d -s -v alpha)" >> "$GITHUB_ENV"
          fi

      - run: ./project coverage
      - name: Static Check
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          # TODO(keithpaterson): figure out why we must use "latest" version to avoid an error here
          version: "2025.1"
          install-go: false

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "-exclude-dir test/integration ./..."

      - name: Run Gosec Security Scanner - Integration Test HTML Hello
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "./test/integration/html/hello"

      - name: Run Gosec Security Scanner - Integration Test HTML - Multi Host
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "test/integration/html/multihosthello/..."

      - name: Run Gosec Security Scanner - Integration Test HTML - Multi Root
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "test/integration/html/multiroothello/..."

      - name: Run Gosec Security Scanner - Integration Test API - Hello
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "test/integration/api/hello/..."

      - name: Run Gosec Security Scanner - Integration Test API - TODO App
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: "test/integration/api/todo/..."

      - name: Run Integration Tests
        if: ${{ contains(fromJson('["pull_request"]'), github.event_name) }}
        run: ./project test integration

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=mortedecai_resweave
            -Dsonar.organization=mortedecai
            -Dsonar.projectVersion=${{ env.CUR_PROJECT_VERSION }}
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/test/integration/**/*.go
            -Dsonar.tests=.
            -Dsonar.test.exclusions=**/vendor/**
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.go.coverage.reportPaths=.reports/coverage.lcov
            -Dsonar.go.tests.reportPaths=.reports/test.json

      - name: Archive Code Reports
        uses: actions/upload-artifact@v4
        with:
          name: project-reports
          path: .reports/
